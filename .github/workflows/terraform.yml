name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  pull-requests: write #needed if you actually want to deploy the code

jobs:
  directories:
    name: "Directory-changes"
    runs-on: ubuntu-latest
    steps:
      - uses: theappnest/terraform-monorepo-action@master
        id: directories
        with:
          ignore: |
            aws/**/policies
            aws/**/templates
            aws/**/scripts
      - run: echo ${{ steps.directories.outputs.modules }}
    outputs:
      dirs: ${{ steps.directories.outputs.modules }}
      
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: directories
    strategy:
      matrix:
        directories: ${{ fromJson(needs.directories.outputs.dirs) }}
    defaults:
      run:
        working-directory: ${{ matrix.directories }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    #defaults:
    #  run:
    #    shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.DEMO_SECRET_TOKEN }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-2

    - name: list content for dir
      run: pwd && ls -la

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    - uses: trstringer/manual-approval@v1
        timeout-minutes: 60
        with:
          secret: ${{ github.TOKEN }}
          approvers: mihaiturcu
          minimum-approvals: 1
          issue-title: "Approve changes on ${{ matrix.directories }}"
          issue-body: "Please approve or deny the terraform plan"
          exclude-workflow-initiator-as-approver: false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Current ref: ${{ github.ref }}"
        echo "Event name: ${{ github.event_name }}"
        echo "Applying Terraform changes..."
        terraform apply -auto-approve -input=false -no-color
